/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author Burak
 */
@SuppressWarnings("serial")
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        griton = new javax.swing.JButton();
        negatif = new javax.swing.JButton();
        sihayBeyaz = new javax.swing.JButton();
        resimToplama = new javax.swing.JButton();
        resimCikarma = new javax.swing.JButton();
        kontrast = new javax.swing.JButton();
        logaritma = new javax.swing.JButton();
        gamma = new javax.swing.JButton();
        mean = new javax.swing.JButton();
        median = new javax.swing.JButton();
        sobel = new javax.swing.JButton();
        prewitt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sayýsal Görüntü Ýþleme");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setName("ekran"); // NOI18N
        setSize(new java.awt.Dimension(0, 0));

        griton.setText("Griton");
        griton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gritonMousePressed(evt);
            }
        });

        negatif.setText("Negatif");
        negatif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                negatifMousePressed(evt);
            }
        });

        sihayBeyaz.setText("Siyah&Beyaz");
        sihayBeyaz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sihayBeyazMousePressed(evt);
            }
        });

        resimToplama.setText("Resim Toplama");
        resimToplama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resimToplamaMousePressed(evt);
            }
        });

        resimCikarma.setText("Resim Çýkarma");
        resimCikarma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resimCikarmaMousePressed(evt);
            }
        });

        kontrast.setText("Kontrast");
        kontrast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kontrastMousePressed(evt);
            }
        });

        logaritma.setText("Logaritma Dönüþümleri");
        logaritma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logaritmaMousePressed(evt);
            }
        });

        gamma.setText("Gamma Dönüþümleri");
        gamma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gammaMousePressed(evt);
            }
        });

        mean.setText("Mean Filtresi");
        mean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                meanMousePressed(evt);
            }
        });

        median.setText("Median Filtresi");
        median.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                medianMousePressed(evt);
            }
        });

        sobel.setText("Sobel Filtresi");
        sobel.setToolTipText("");
        sobel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sobelMousePressed(evt);
            }
        });

        prewitt.setText("Prewitt Filtresi");
        prewitt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                prewittMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(griton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(negatif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sihayBeyaz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resimToplama)
                        .addGap(10, 10, 10)
                        .addComponent(resimCikarma)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kontrast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logaritma))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mean)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(median)
                        .addGap(33, 33, 33)
                        .addComponent(sobel)
                        .addGap(18, 18, 18)
                        .addComponent(prewitt)
                        .addGap(18, 18, 18)
                        .addComponent(gamma)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(griton)
                    .addComponent(negatif)
                    .addComponent(sihayBeyaz)
                    .addComponent(resimToplama)
                    .addComponent(resimCikarma)
                    .addComponent(kontrast)
                    .addComponent(logaritma))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mean)
                    .addComponent(median)
                    .addComponent(sobel)
                    .addComponent(prewitt)
                    .addComponent(gamma))
                .addContainerGap(289, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    
    private void gritonMousePressed(java.awt.event.MouseEvent evt) {                                    
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
			        File input = new File(path);
			        
			        BufferedImage image = ImageIO.read(input);
			        BufferedImage result = new BufferedImage(
			        		image.getWidth(),
			                image.getHeight(),
			                BufferedImage.TYPE_INT_RGB);

			        Graphics2D graphic = result.createGraphics();
			        graphic.drawImage(image, 0, 0, Color.WHITE, null);
			        
			        for (int i = 0; i < result.getHeight(); i++) {
			        	for (int j = 0; j < result.getWidth(); j++) {
			        		Color c = new Color(result.getRGB(j, i));
			                int red = (int) (c.getRed() * 0.2989);
			                int green = (int) (c.getGreen() * 0.587);
			                int blue = (int) (c.getBlue() * 0.114);
			                Color newColor = new Color(
			                        red + green + blue,
			                        red + green + blue,
			                        red + green + blue);
			                result.setRGB(j, i, newColor.getRGB());
			            }
			        }
			        JFrame griekran = new JFrame ("gri");
			        griekran.setVisible(true);
					griekran.setSize(550,550);
					griekran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lbl = new JLabel(image1);
					griekran.add(lbl);
			      } catch (IOException e1) {
			      }
    }                                   

    private void negatifMousePressed(java.awt.event.MouseEvent evt) {                                     
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
			        File input = new File(path);
			        BufferedImage image = ImageIO.read(input);
			        BufferedImage result = new BufferedImage(
			                image.getWidth(),
			                image.getHeight(),
			                BufferedImage.TYPE_INT_RGB);
			        Graphics2D graphic = result.createGraphics();
			        graphic.drawImage(image, 0, 0, Color.WHITE, null);
			        
			        int r=0, g = 0, b=0;
			        
			        
			        for(int y = 0; y < image.getHeight(); y++)
			        {
			        	for(int x = 0; x <  image.getWidth(); x++)
			            {
			        		Color c = new Color(image.getRGB(x, y));
			        		
			                r = c.getRed();
			                
			                g = c.getGreen();
			                
			                b = c.getBlue();
			                
			                Color c3 = new Color(r,g,b);
			                
			                result.setRGB(x, y, 255-c3.getRGB());
			            }
			        }
			        JFrame negatifekran = new JFrame ("negatif");
			        negatifekran.setVisible(true);
					negatifekran.setSize(550,550);
					negatifekran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lblnegatif = new JLabel(image1);
					negatifekran.add(lblnegatif);
			      } catch (IOException e1) {
			      }
    }                                    

    private void sihayBeyazMousePressed(java.awt.event.MouseEvent evt) {                                        
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
			        File input = new File(path);
			        BufferedImage image = ImageIO.read(input);			          
			        BufferedImage result = new BufferedImage(
			                image.getWidth(),
			                image.getHeight(),
			                BufferedImage.TYPE_BYTE_BINARY);
			        Graphics2D graphic = result.createGraphics();
			        graphic.drawImage(image, 0, 0, Color.WHITE, null);			         
			        JFrame sb = new JFrame ("siyah&beyaz");
			        sb.setVisible(true);
					sb.setSize(550,550);
					sb.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lblsb = new JLabel(image1);
					sb.add(lblsb);
			      } catch (IOException e1) {
			      }
    }                                       

    private void resimToplamaMousePressed(java.awt.event.MouseEvent evt) {                                          
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);          
					File f1=null;
					String path1=null;
					JFileChooser fileChooser1=new JFileChooser();
					fileChooser1.showOpenDialog(fileChooser1);
					f1=fileChooser1.getSelectedFile();
					path1=f1.getAbsolutePath();
					File input1 = new File(path1);
					BufferedImage image1 = ImageIO.read(input1);	          
					BufferedImage result1 = new BufferedImage(
							image1.getWidth(),
							image1.getHeight(),
							BufferedImage.TYPE_INT_RGB);
					Graphics2D graphic = result1.createGraphics();
					graphic.drawImage(image1, 0, 0, Color.WHITE, null);
					for (int i = 0; i < result1.getHeight(); i++) {
						for (int j = 0; j < result1.getWidth(); j++) { 
							Color c = new Color(image.getRGB(j, i));
							Color c1 = new Color(image1.getRGB(j, i));
							int r1 = c1.getRed();
							int g1 = c1.getGreen();
							int b1 = c1.getBlue();
	                 
							int r = c.getRed();
							int g = c.getGreen();
							int b = c.getBlue();
	                 
							int r2=r1+r;
							int g2=g1+g;
							int b2=b1+b;                 
							if(r2>255) {
	                		r2=255;
							}
							if(g2>255) {
								g2=255;
							}
							if(b2>255) {
								b2=255;
							}
							Color c3 = new Color(r2,g2,b2);
							result1.setRGB(j, i, c3.getRGB());   
						}
					}

					JFrame toplamaEkran = new JFrame ("Toplama");
					toplamaEkran.setVisible(true);
					toplamaEkran.setSize(550,550);
					toplamaEkran.setLocationRelativeTo(null);
					ImageIcon image11 = new ImageIcon(result1);
					JLabel lbltop = new JLabel(image11);
					toplamaEkran.add(lbltop);
				}  catch (IOException e1) {
				}
    }                                         

    private void resimCikarmaMousePressed(java.awt.event.MouseEvent evt) {                                          
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);
	          
					File f1=null;
					String path1=null;
					JFileChooser fileChooser1=new JFileChooser();
					fileChooser1.showOpenDialog(fileChooser1);
					f1=fileChooser1.getSelectedFile();
					path1=f1.getAbsolutePath();
					File input1 = new File(path1);
					BufferedImage image1 = ImageIO.read(input1);
	          
					BufferedImage result1 = new BufferedImage(
							image1.getWidth(),
							image1.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result1.createGraphics();
					graphic.drawImage(image1, 0, 0, Color.WHITE, null);
					for (int i = 0; i < result1.getHeight(); i++) {
						for (int j = 0; j < result1.getWidth(); j++) {
	                  
							Color c = new Color(image.getRGB(j, i));
							Color c1 = new Color(image1.getRGB(j, i));
	                 	
							int r1 = c1.getRed();
							int g1 = c1.getGreen();
							int b1 = c1.getBlue();
	                 
							int r = c.getRed();
							int g = c.getGreen();
							int b = c.getBlue();
	                 
							int r2=r1-r;
							int g2=g1-g;
							int b2=b1-b;
	                 
							if(r2<0) {
								r2=0;
							}
							if(g2<0) {
								g2=0;
							}
							if(b2<0) {
								b2=0;
							}
							Color c3 = new Color(r2,g2,b2);
							result1.setRGB(j, i, c3.getRGB());   
						}
					}

					JFrame cikarmaEkran = new JFrame ("Çýkarma");
					cikarmaEkran.setVisible(true);
					cikarmaEkran.setSize(550,550);
					cikarmaEkran.setLocationRelativeTo(null);
					ImageIcon image11 = new ImageIcon(result1);
					JLabel lblcik = new JLabel(image11);
					cikarmaEkran.add(lblcik);
				}  catch (IOException e1) {
				}	
    }                                         

    private void kontrastMousePressed(java.awt.event.MouseEvent evt) {                                      
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
					for (int i = 0; i < result.getHeight(); i++) {
						for (int j = 0; j < result.getWidth(); j++) {
	                  
							Color c = new Color((int) (image.getRGB(j, i)));
	                 
							int r = c.getRed();
							int g = c.getGreen();
							int b = c.getBlue();
	                 
							if(r<180) {
								r=0;
							}else {
								r=255;
							}
							if(g<180) {
								g=0;
							}else {
								g=255;
							}
							if(b<180) {
								b=0;
							}else {
								b=255;
							}
							Color c3 = new Color(r,g,b);
							result.setRGB(j, i, c3.getRGB());   
						}
					}
					JFrame kontrastEkran = new JFrame ("Kontrast");
					kontrastEkran.setVisible(true);
					kontrastEkran.setSize(550,550);
					kontrastEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lblkontrast = new JLabel(image1);
					kontrastEkran.add(lblkontrast);        
				}  catch (IOException e1) {
				}	
    }                                     

    private void logaritmaMousePressed(java.awt.event.MouseEvent evt) {                                       
       try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
					
					for (int i = 0; i < result.getHeight(); i++) {
						for (int j = 0; j < result.getWidth(); j++) {
							int pix =0;
							int alpha = 0xff & (image.getRGB(j,i)>>24);
							int red = 0xff &(image.getRGB(j,i)>>16);
	                    	int green = 0xff &(image.getRGB(j,i)>>8);
	                    	int blue = 0xff & image.getRGB(j,i);
	                    	red = (int)Math.round( 100.0*Math.log10((double)red)+1);
	                    	green = (int)Math.round( 100.0*Math.log10((double)green)+1);
	                    	blue = (int)Math.round( 100.0*Math.log10((double)blue)+1);
	                    	pix = pix | blue;
	                    	pix = pix | (green <<8);
	                    	pix = pix | (red <<16);
	                    	pix = pix | (alpha <<24);
	                    	result.setRGB( j, i, pix);
	                    	pix = 0;
						}
					}
					JFrame logEkran = new JFrame ("Logaritma");
					logEkran.setVisible(true);
					logEkran.setSize(550,550);
					logEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lbllog = new JLabel(image1);
					logEkran.add(lbllog);

				}  catch (IOException e1) {
				}
    }                                      

    private void gammaMousePressed(java.awt.event.MouseEvent evt) {                                   
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
	          
					for (int i = 0; i < result.getHeight(); i++) {
						for (int j = 0; j < result.getWidth(); j++) {
							int pix =0;
							int alpha = 0xff & (image.getRGB(j,i)>>24);
	                    	int red = 0xff &(image.getRGB(j,i)>>16);
	                    	int green = 0xff &(image.getRGB(j,i)>>8);
	                    	int blue = 0xff & image.getRGB(j,i);
	                    	
	                    	red = (int)Math.round( 255.0*((double)Math.pow(red/255.0,1.0/2.0)));
	                    	green = (int)Math.round( 255.0*((double)Math.pow(green/255.0,1.0/2.0)));
	                    	blue = (int)Math.round( 255.0*((double)Math.pow(blue/255.0,1.0/2.0)));
	                    	
	                    	pix = pix | blue;
	                    	pix = pix | (green <<8);
	                    	pix = pix | (red <<16);
	                    	pix = pix | (alpha <<24);
	                    	result.setRGB( j, i, pix);
	                    	pix = 0;
						}
					}
					JFrame gammaEkran = new JFrame ("Gamma");
					gammaEkran.setVisible(true);
					gammaEkran.setSize(550,550);
					gammaEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(result);
					JLabel lblgamma = new JLabel(image1);
					gammaEkran.add(lblgamma);
				}  catch (IOException e1) {
				}
    }                                  

    private void meanMousePressed(java.awt.event.MouseEvent evt) {                                  
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
	          
					int maxHeight = image.getHeight();
					int maxWidth = image.getWidth();
  
					int picture[][] = new int [maxHeight][maxWidth];
					int pictureFile[][] = new int [maxHeight][maxWidth];
					for( int i = 0; i < maxHeight; i++ ){
						for( int j = 0; j < maxWidth; j++ ){
							pictureFile[i][j] = image.getRGB( j, i );
						}
					}
					for (int v=3; v<=maxHeight-2; v++) {
						for (int u=3; u<=maxWidth-2; u++) {
	            	  
							int sum = 0 ,sumr=0 ,sumg=0, sumb=0;
							for (int j=-3; j<=1; j++) {
								for (int i=-3; i<=1; i++) {
									
									int p = pictureFile[u+i][v+j];
									sum = sum + p;
									int pixel=pictureFile[u+i][v+j];
									int rr=(pixel&0x00ff0000)>>16, rg=(pixel&0x0000ff00)>>8, rb=pixel&0x000000ff;
	                          		sumr=sumr+rr;
	                          		sumg=rg+sumg;
	                          		sumb=rb+sumb;
								}
							}

							sumr/=25; sumg/=25; sumb/=25;
							int newPixel = 0xff000000|(sumr<<16)|(sumg<<8)|(sumb);
							picture[u][v] = newPixel;
						}
					}
					int value;
	          
					for(int y = 0; y<maxHeight; y++){
						for(int x = 0; x<maxWidth; x++){
							value = picture[y][x] ;
							image.setRGB(x, y, value);
						}
					}
                                        
					JFrame meanEkran = new JFrame ("Mean");
					meanEkran.setVisible(true);
					meanEkran.setSize(750,750);
					meanEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(image);
					JLabel lblmean = new JLabel(image1);
					meanEkran.add(lblmean);
				}  catch (IOException e1) {
				}
    }                                 

    private void medianMousePressed(java.awt.event.MouseEvent evt) {                                    
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
	          
					int maxHeight = image.getHeight();
					int maxWidth = image.getWidth();


					int pictureFile[][] = new int [maxHeight][maxWidth];
					int picture[][] = new int [maxHeight][maxWidth];
					int[] p= new int [50];
	          
					for( int i = 0; i < maxHeight; i++ ){
						for( int j = 0; j < maxWidth; j++ ){
							pictureFile[i][j] = image.getRGB( j, i );
						}
					}
					for (int v=3; v<=maxHeight-2; v++) {
						for (int u=3; u<=maxWidth-2; u++) {
							
							int sumr=0;
							for (int j=-3; j<=1; j++) {
								for (int i=-3; i<=1; i++) {
	                    	  
									int pixel=pictureFile[u+i][v+j];
									p[sumr]=pixel;
									sumr+=1;
								}
							} 
							Arrays.sort(p);
							picture[u][v] = p[12];
						}
					}
					int value;
					for(int y = 0; y<maxHeight; y++){
						for(int x = 0; x<maxWidth; x++){
							value = picture[y][x] ;
							image.setRGB(x, y, value);
						}
					}
					JFrame medianEkran = new JFrame ("Median");
					medianEkran.setVisible(true);
					medianEkran.setSize(750,750);
					medianEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(image);
					JLabel lblmedian = new JLabel(image1);
					medianEkran.add(lblmedian);

				}  catch (IOException e1) {
				}		
    }                                   

    private void sobelMousePressed(java.awt.event.MouseEvent evt) {                                   
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);
					
					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
	          
					int x = image.getWidth();
					int y = image.getHeight();

					int[][] edgeColors = new int[x][y];
					int maxGradient = -1;

					for (int i = 1; i < x - 1; i++) {
						for (int j = 1; j < y - 1; j++) {

							int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
							int val01 = getGrayScale(image.getRGB(i - 1, j));
							int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

							int val10 = getGrayScale(image.getRGB(i, j - 1));
							int val11 = getGrayScale(image.getRGB(i, j));
							int val12 = getGrayScale(image.getRGB(i, j + 1));

							int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
							int val21 = getGrayScale(image.getRGB(i + 1, j));
							int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

							int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
									+ ((-2 * val10) + (0 * val11) + (2 * val12))
									+ ((-1 * val20) + (0 * val21) + (1 * val22));

							int gy =  ((-1 * val00) + (-2 * val01) + (-1 * val02))
									+ ((0 * val10) + (0 * val11) + (0 * val12))
									+ ((1 * val20) + (2 * val21) + (1 * val22));

							double gval = Math.sqrt((gx * gx) + (gy * gy));
							int g = (int) gval;

							if(maxGradient < g) {
								maxGradient = g;
							}

							edgeColors[i][j] = g;
						}
					}

					double scale = 255.0 / maxGradient;

					for (int i = 1; i < x - 1; i++) {
						for (int j = 1; j < y - 1; j++) {
							int edgeColor = edgeColors[i][j];
							edgeColor = (int)(edgeColor * scale);
							edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

							image.setRGB(i, j, edgeColor);
						}
					}
					JFrame sobelEkran = new JFrame ("Sobel");
					sobelEkran.setVisible(true);
					sobelEkran.setSize(750,750);
					sobelEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(image);
					JLabel lblsobel = new JLabel(image1);
					sobelEkran.add(lblsobel);

				}  catch (IOException e1) {
				}		
    }                                  

    private void prewittMousePressed(java.awt.event.MouseEvent evt) {                                     
        try {
					File f=null;
					String path=null;
					JFileChooser fileChooser=new JFileChooser();
					fileChooser.showOpenDialog(fileChooser);
					f=fileChooser.getSelectedFile();
					path=f.getAbsolutePath();
					File input = new File(path);
					BufferedImage image = ImageIO.read(input);

					BufferedImage result = new BufferedImage(
							image.getWidth(),
							image.getHeight(),
							BufferedImage.TYPE_INT_RGB);
	          
					Graphics2D graphic = result.createGraphics();
					graphic.drawImage(image, 0, 0, Color.WHITE, null);
	          
					int x = image.getWidth();
					int y = image.getHeight();

					int[][] edgeColors = new int[x][y];
					int maxGradient = -1;

					for (int i = 1; i < x - 1; i++) {
						for (int j = 1; j < y - 1; j++) {

							int val00 = getGrayScale(image.getRGB(i - 1, j - 1));
							int val01 = getGrayScale(image.getRGB(i - 1, j));
							int val02 = getGrayScale(image.getRGB(i - 1, j + 1));

							int val10 = getGrayScale(image.getRGB(i, j - 1));
							int val11 = getGrayScale(image.getRGB(i, j));
							int val12 = getGrayScale(image.getRGB(i, j + 1));

							int val20 = getGrayScale(image.getRGB(i + 1, j - 1));
							int val21 = getGrayScale(image.getRGB(i + 1, j));
							int val22 = getGrayScale(image.getRGB(i + 1, j + 1));

							int gx =  ((-1 * val00) + (0 * val01) + (1 * val02)) 
									+ ((-1 * val10) + (0 * val11) + (1 * val12))
									+ ((-1 * val20) + (0 * val21) + (1 * val22));

							int gy =  ((-1 * val00) + (-1 * val01) + (-1 * val02))
									+ ((0 * val10) + (0 * val11) + (0 * val12))
									+ ((1 * val20) + (1 * val21) + (1 * val22));

							double gval = Math.sqrt((gx * gx) + (gy * gy));
							int g = (int) gval;

							if(maxGradient < g) {
								maxGradient = g;
							}

							edgeColors[i][j] = g;
						}
					}
					
					double scale = 255.0 / maxGradient;

					for (int i = 1; i < x - 1; i++) {
						for (int j = 1; j < y - 1; j++) {
							int edgeColor = edgeColors[i][j];
							edgeColor = (int)(edgeColor * scale);
							edgeColor = 0xff000000 | (edgeColor << 16) | (edgeColor << 8) | edgeColor;

							image.setRGB(i, j, edgeColor);
						}
					}
					JFrame prewitEkran = new JFrame ("Prewit");
					prewitEkran.setVisible(true);
					prewitEkran.setSize(750,750);
					prewitEkran.setLocationRelativeTo(null);
					ImageIcon image1 = new ImageIcon(image);
					JLabel lblprewit = new JLabel(image1);
					prewitEkran.add(lblprewit);
				}  catch (IOException e1) {
				}
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NewJFrame().setVisible(true);
        });
        
    }
public static int  getGrayScale(int rgb) {
        int r = (rgb >> 16) & 0xff;
        int g = (rgb >> 8) & 0xff;
        int b = (rgb) & 0xff;
        int gray = (int)(0.2989 * r + 0.587 * g + 0.114 * b);
        return gray;
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton gamma;
    private javax.swing.JButton griton;
    private javax.swing.JButton kontrast;
    private javax.swing.JButton logaritma;
    private javax.swing.JButton mean;
    private javax.swing.JButton median;
    private javax.swing.JButton negatif;
    private javax.swing.JButton prewitt;
    private javax.swing.JButton resimCikarma;
    private javax.swing.JButton resimToplama;
    private javax.swing.JButton sihayBeyaz;
    private javax.swing.JButton sobel;
    // End of variables declaration                   
}

